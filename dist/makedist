#!/usr/bin/env python

import os, re, shutil, time, sys

SourceDir = "duplicity"
DistDir = "dist"

# Various details about the files must also be specified by the rpm
# spec template.
spec_template = "dist/duplicity.spec.template"

def CopyMan(input_name, destination, version):
	"""Create updated man page at the specified location"""
	fp = open(destination, "w")
	date = time.strftime("%B %Y", time.localtime(time.time()))
	version = "Version "+version
	firstline = ('.TH RDIFFDIR 1 "%s" "%s" "User Manuals"\n' %
				 (date, version))
	fp.write(firstline)
	infp = open(input_name, "r")
	infp.readline()
	fp.write(infp.read())
	fp.close()
	infp.close()

def MakeFAQ():
	"""Create FAQ.html and FAQ.wml files from FAQ-body.html"""
	faqbody_fp = open("FAQ-body.html", "r")
	faqbody_string = faqbody_fp.read()
	faqbody_fp.close()

	wml_fp = open("FAQ.wml", "w")
	wml_fp.write(
"""#include 'template.wml' curpage=faq title="rdiff-backup: FAQ"

<divert body>
<p><h2>FAQ:</h2>

""")
	wml_fp.write(faqbody_string)
	wml_fp.write("\n</divert>\n")
	wml_fp.close()

	html_fp = open("FAQ.html", "w")
	html_fp.write(
"""<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
  <head>
    <title>rdiff-backup FAQ</title>
  </head>

  <body>
  <h1>rdiff-backup FAQ</h1>
""")
	html_fp.write(faqbody_string)
	html_fp.write("\n</body></html>")
	html_fp.close()

def VersionedCopy(source, dest):
	"""Copy source to dest, substituting $version with version"""
	fin = open(source, "rb")
	inbuf = fin.read()
	assert not fin.close()

	outbuf = re.sub("\$version", Version, inbuf, 1)
	if outbuf == inbuf: assert 0, "No $version string replaced"
	assert not re.search("\$version", outbuf), \
		   "Two $version strings found in the same file %s" % (source,)

	fout = open(dest, "wb")
	fout.write(outbuf)
	assert not fout.close()

def MakeTar():
	"""Create rdiff-backup tar file"""
	tardir = "duplicity-%s" % Version
	tarfile = "duplicity-%s.tar.gz" % Version
	try:
		os.lstat(tardir)
		os.system("rm -rf " + tardir)
	except OSError: pass
	os.mkdir(tardir)
	for filename in ["COPYING", "README", "CHANGELOG",
					 SourceDir + "/_librsyncmodule.c",
					 DistDir + "/setup.py"]:
		assert not os.system("cp %s %s" % (filename, tardir)), filename

	os.mkdir(tardir+"/src")

	for filename in ["backends.py", "collections.py", "commandline.py",
					 "diffdir.py", "dup_temp.py", "dup_time.py",
					 "file_naming.py", "globals.py",
					 "gpg.py", "__init__.py",
					 "lazy.py", "librsync.py", "log.py",
					 "manifest.py", "misc.py", "patchdir.py",
					 "path.py", "robust.py", "selection.py",
					 "static.py", "statistics.py", "tarfile.py"]:
		assert not os.system("cp %s/%s %s/src" %
							 (SourceDir, filename, tardir)), filename

	VersionedCopy("%s/globals.py" % (SourceDir,),
				  "%s/src/globals.py" % (tardir,))
	VersionedCopy("duplicity-bin", "%s/duplicity" % (tardir,))
	VersionedCopy("rdiffdir", "%s/rdiffdir" % (tardir,))
	VersionedCopy(DistDir + "/setup.py", "%s/setup.py" % (tardir,))

	os.chmod(os.path.join(tardir, "setup.py"), 0755)
	os.chmod(os.path.join(tardir, "rdiffdir"), 0644)
	CopyMan("rdiffdir.1", os.path.join(tardir, "rdiffdir.1"), Version)
	CopyMan("duplicity.1", os.path.join(tardir, "duplicity.1"), Version)
	os.system("tar -cvzf %s %s" % (tarfile, tardir))
	shutil.rmtree(tardir)
	return tarfile

def MakeSpecFile():
	"""Create spec file using spec template"""
	specfile = "duplicity.spec"
	VersionedCopy(spec_template, specfile)
	return specfile

def Main():
	#print "Making FAQ"
	#MakeFAQ()
	print "Processing version " + Version
	tarfile = MakeTar()
	print "Made tar file " + tarfile
	specfile = MakeSpecFile()
	print "Made specfile ", specfile

if __name__ == "__main__" and not globals().has_key('__no_execute__'):
	if len(sys.argv) != 2:
		print "Syntax: makedist [version_number]"
		sys.exit(1)
	Version = sys.argv[1]
	Main()

