import sys, os
sys.path.insert(0, "../")
from duplicity import globals, log

import gettext
gettext.install('duplicity')

# config for duplicity unit tests

# to test GPG and friends
# these must be without passwords
encrypt_key1 = ""
encrypt_key2 = ""

# password required on this one
sign_key = ""
sign_passphrase = ""

# URLs for testing
# NOTE: if the ***_url is None or "" the test
# is skipped and is noted in the test results.

file_url = "file:///home/ken/testdup"
file_password = None

ftp_url = None
ftp_password = None

# To set up rsyncd for test:
# /etc/rsyncd.conf contains
# [testdup]
# path = /home/ken/testdup
# comment = Test area for duplicity
# read only = false
#
# NOTE: chmod 777 /home/ken/testdup

rsync_abspath_url = None
rsync_relpath_url = None
rsync_module_url = None
rsync_password = None

ssh_url = None
ssh_password = None

s3_url = None
s3_access_key = None
s3_secret_key = None

webdav_url = None
webdav_password = None

webdavs_url = None
webdavs_password = None

def setup():
    """ setup for unit tests """
    log.setup()
    log.setverbosity(0)
    globals.print_statistics = 0

    globals.num_retries = 2

    set_environ("FTP_PASSWORD", None)
    set_environ("PASSPHRASE", None)
    if s3_access_key:
        set_environ("AWS_ACCESS_KEY_ID", s3_access_key)
        set_environ("AWS_SECRET_ACCESS_KEY", s3_secret_key)
    else:
        set_environ("AWS_ACCESS_KEY_ID", None)
        set_environ("AWS_SECRET_ACCESS_KEY", None)


def set_environ(varname, value):
    if value is not None:
        os.environ[varname] = value
    else:
        try:
            del os.environ[varname]
        except:
            pass
