import sys, os
sys.path.insert(0, "../")
from duplicity import globals, log

# config for duplicity unit tests

# to test GPG and friends
# these must be without passwords
encrypt_key1 = ""
encrypt_key2 = ""

# password required on this one
sign_key = ""
sign_passphrase = ""

# URLs for testing
file_url = "file:///home/ken/testdup"
file_password = None

ftp_url = "ftp://ken@xyzzyx/testdup"
ftp_password = None

# /etc/rsyncd.conf contains
# [testdup]
# path = /home/ken/testdup
# comment = Test area for duplicity
# read only = false
#
# NOTE: chmod 777 /home/ken/testdup

rsync_abspath_url = "rsync://ken@xyzzyx//home/ken/testdup"
rsync_relpath_url = "rsync://ken@xyzzyx/testdup"
rsync_module_url = "rsync://ken@xyzzyx::/testdup"
rsync_password = None

ssh_url = "ssh://ken@xyzzyx/testdup"
ssh_password = None

s3_url = "s3+http://testdup/test"
s3_access_key = ""
s3_secret_key = ""


def setup():
   	""" setup for unit tests """
	log.setverbosity(0)
	globals.print_statistics = 0

	globals.num_retries = 1

	set_environ("FTP_PASSWORD", None)
	set_environ("PASSPHRASE", None)
	if s3_access_key:
		set_environ("AWS_ACCESS_KEY_ID", s3_access_key)
		set_environ("AWS_SECRET_ACCESS_KEY", s3_secret_key)
	else:
		set_environ("AWS_ACCESS_KEY_ID", None)
		set_environ("AWS_SECRET_ACCESS_KEY", None)


def set_environ(varname, value):
	if value is not None:
		os.environ[varname] = value
	else:
		try:
			del os.environ[varname]
		except:
			pass
